name: Streamlit Application

on:
  push:
    branches: [ "main" ]
  pull_request: 
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest  # [ self-hosted ]

    steps:
      - uses: actions/checkout@v3

      - name: Set Up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Set up Google API Key
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        run: echo "GOOGLE_API_KEY=${GOOGLE_API_KEY}" >> $GITHUB_ENV

      - name: Docker Build and Push
        run: |
          docker build -t my-streamlit-app .
          docker tag my-streamlit-app xerxez786/my-streamlit-app:latest
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker push xerxez786/my-streamlit-app:latest

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Build and Analyze with SonarQube
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # - name: Trivy file scan
      #   run: trivy fs . > trivyfs.txt

      # - name: Trivy CIS Compliance Issue
      #   run: trivy image --compliance docker-cis xerxez786/my-streamlit-app:latest > trivy_image_compliance.txt
  
  deploy:
    needs: build
    runs-on: ubuntu-latest  # [ self-hosted ]

    steps:
      - name: Docker Pull Image
        run: docker pull xerxez786/my-streamlit-app:latest

      # - name: Image Scan
      #   run: trivy image xerxez786/my-streamlit-app:latest > trivyimagedeploy.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup kubectl
        uses: actions-hub/kubectl@master
        with:
          version: '1.17'
    
      - name: Update kubeconfig
        run: aws eks --region ap-south-1 update-kubeconfig --name EKS_CLOUD
    
      - name: Deploy to EKS
        run: |
          kubectl apply -f EKS_CLOUD/deployment.yaml
          kubectl apply -f EKS_CLOUD/service.yaml
      
      # - name: Deploy to Container
      #   run: docker run -d --name webapp -p 8501:8501 xerxez786/my-streamlit-app:latest

      # - name: Update Kubeconfig
      #   run: aws eks --region ap-south-1 update-kubeconfig --name EKS_CLOUD

      # - name: Deploy to Kubernetes
      #   run: kubectl apply -f deployment.yml
      
      - name: Send a Slack Notification
        if: always()
        uses: act10ns/slack@v1
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#gen-ai'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
